/**
 * CreationLabyrinthe.java
 * Iut roidez pas de droits d'auteurs
 */

package iut.info1.sae.create;
import java.util.Arrays;
import java.util.Random;

import iut.info1.sae.joueur.Joueur;
import iut.info1.sae.labyrinthe.Cellule;
import iut.info1.sae.labyrinthe.Labyrinthe;
import iut.info1.sae.pile.Pile;

public class CreationBacktracking {
    private int largeur;
    private int hauteur;
    private Cellule[][] cellules;
    Pile pileSommets = new Pile();
    boolean[] sommetParcouru;

    public CreationBacktracking(int largeur, int hauteur) {
        this.largeur = largeur;
        this.hauteur = hauteur;
        this.cellules = new Cellule[hauteur][largeur];
        // Initialise les cellules avant d'appeler la méthode parcoursBacktracking
        for (int i = 0; i < hauteur; i++) {
            for (int j = 0; j < largeur; j++) {
            	boolean[] murs = {true, true, true, true};
                cellules[i][j] = new Cellule(murs);
                
            }
        }
        sommetParcouru = new boolean[hauteur * largeur];
        
        parcoursBacktracking();
        createLabyrinthe();
    }
 
    /**
     * @throws IllegalArgumentException si le numéro de sommet est faux
     */
    public void parcoursBacktracking() {
    	int[] numeroSommet = new int [hauteur * largeur];

		for(int i = 0; i < numeroSommet.length; i++) {
			numeroSommet[i] = i + 1;
			sommetParcouru[i] = false;
	    }
		
    	int indiceAleatoire = new Random().nextInt(numeroSommet.length);
    	if(indiceAleatoire < sommetParcouru.length) {
    		sommetParcouru[indiceAleatoire] = true;
    	}
    	
    	pileSommets.empiler(indiceAleatoire + 1);
    	
    	while(!pileSommets.estVide()) {
    		int sommetCourant = (int) pileSommets.sommet();
    		int[] pieceVoisines = getVoisins(sommetCourant);
    		
    		//on vérifie si les pièces voisines ont déjà été parcouru
    		int[] piecesNonParcourues = Arrays.stream(pieceVoisines)
    			    .filter(piece -> piece > 0 && !sommetParcouru[piece])
    			    .toArray();


    		if (piecesNonParcourues.length == 0) {
    			 pileSommets.depiler();
    		}

            else {
            	int indiceSommetVoisin = new Random().nextInt(pieceVoisines.length);
            	int numeroPieceVoisine = pieceVoisines[indiceSommetVoisin];
            	Cellule celluleCourante = cellules[getHauteur(sommetCourant)][getLargeur(sommetCourant)];
            	Cellule celluleVoisine = cellules[getHauteur(numeroPieceVoisine)][getLargeur(numeroPieceVoisine)];
            	casserMur(celluleCourante, celluleVoisine);
            	pileSommets.empiler(numeroPieceVoisine);
            	sommetParcouru[numeroPieceVoisine] = true;
            	
            }
    	}
    	
    }

    private void casserMur(Cellule pieceCourante, Cellule pieceVoisine) {
		int largeur1 = getLargeurPiece(pieceCourante);
		int hauteur1 = getHauteurPiece(pieceCourante);
		int largeur2 = getLargeurPiece(pieceVoisine);
		int hauteur2 = getHauteurPiece(pieceVoisine);
		

	    // Vérifier si les pièces forment un îlot 2x2 sans murs autour
	    if (largeur1 == largeur2 && hauteur1 < hauteur2) {
            pieceCourante.setMurs(false, 2); // Ouvrir un passage à l'est dans cellule1
            pieceVoisine.setMurs(false, 3); // Ouvrir un passage à l'ouest dans cellule2
        } else if (largeur1 == largeur2 && hauteur1 > hauteur2) {
            pieceCourante.setMurs(false, 3); // Ouvrir un passage à l'ouest dans cellule1
            pieceVoisine.setMurs(false, 2); // Ouvrir un passage à l'est dans cellule2
        } else if (hauteur1 == hauteur2 && largeur1 < largeur2) {
            pieceCourante.setMurs(false, 1); // Ouvrir un passage au sud dans cellule1
            pieceVoisine.setMurs(false, 0); // Ouvrir un passage au nord dans cellule2
        } else if (hauteur1 == hauteur2 && largeur1 > largeur2) {
            pieceCourante.setMurs(false, 0); // Ouvrir un passage au nord dans cellule1
            pieceVoisine.setMurs(false, 1); // Ouvrir un passage au sud dans cellule2
        }
		
	}
	/** 
     * @param noPiece le numéro du sommet;
     * @return
     */
    public int getHauteur(int noPiece) {
    	return noPiece / largeur;
    }
    
    /** 
     * 
     * @param noPiece numéro de sommet de la pièce
     * @return la largeur d'une pièce passé en paramètre
     */
    public int getLargeur(int noPiece) {
    	return noPiece % largeur;
    }
    /**
     * 
     * @param cellule
     * @return
     */
    private int getLargeurPiece(Cellule piece) {
        for (int i = 0; i < hauteur; i++) {
            for (int j = 0; j < largeur; j++) {
                if (cellules[i][j] == piece) {
                    return i;
                }
            }
        }
        return -1;
    }
    /**
     * 
     * @param cellule
     * @return
     */
    private int getHauteurPiece(Cellule piece) {
        for (int i = 0; i < hauteur; i++) {
            for (int j = 0; j < largeur; j++) {
                if (cellules[i][j] == piece) {
                    return j;
                }
            }
        }
        return -1;
    }
    
    /**
     * la fonction trouve toutes les pièces voisines d'une pièce
     * @param numeroSommet de la pièce courante
     * @return une liste avec les numéros de sommets des pièces voisines
     * @throws IllegalArgumentException si le numéro de pièce est incorrecte
     */
    public int[] getVoisins (int noPiece) {
    	int[] voisins = new int[4];
    	int hauteurPiece = noPiece / largeur;
    	int largeurPiece = noPiece % largeur;
    	if(largeurPiece > 0) {
    		voisins[0] = noPiece - 1;
    	}
    	if(largeurPiece < largeur - 1 ) {
    		voisins[1] = noPiece + 1 ;
    	}
    	if(hauteurPiece > 0) {
    		voisins[2] = noPiece - largeur;
    	}
    	if(hauteurPiece < hauteur - 1) {
    		voisins[3] = noPiece + largeur;
    	}
    	return voisins;
    }

    
    /**
     * 
     * @return le labyrinthe créer
     */
    public Labyrinthe createLabyrinthe() {
    	Labyrinthe labyrinthe = new Labyrinthe(largeur, hauteur);
    	for(int i = 0; i < hauteur; i++) {
    		for (int j = 0; j < largeur; j++) {
    			boolean nord = cellules[i][j].estMurPresent('N');
    			boolean sud = cellules[i][j].estMurPresent('S');
    			boolean ouest = cellules[i][j].estMurPresent('O');
    			boolean est = cellules[i][j].estMurPresent('E');
    			labyrinthe.ajoutCellule(j, i, nord, sud, est, ouest);
    		}
    	}
    	Joueur joueur = new Joueur(labyrinthe);
    	joueur.afficherLabyrintheJoueur();
    	return labyrinthe;
    }
    public static void main(String[] args) {
        CreationBacktracking test = new CreationBacktracking(10,10);
    }
}
