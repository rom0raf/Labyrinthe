/*
 * CreationLabyrinthe.java    16/05/2023
 * Aucun copyrights ni "copylefts"
 */

package iut.info1.sae.create;

import iut.info1.sae.labyrinthe.*;
import iut.info1.sae.pile.Pile;
import java.util.*;

/**
 * classe creationLabyrinthe
 * elle crée le labyrinthe de deux manières différentes : 
 * - par création ascendante de chaînes
 * - par descente en profondeur
 * 
 * @author Antonin Veyre
 * @author Aurélien Soleil
 * @author Lohan Vignals
 * @author Rafael Roma
 */
public class CreationLabyrinthe {

        
    /**
    * création du labyrinthe par création ascendante de chaînes
    * @param hauteur la hauteur du labyrinthe
    * @param largeur la largeur du labyrinthe
    * @return le labyrinthe créer
    */
   public static Labyrinthe creationAscendante(int hauteur, int largeur){
      
        Cellule[][] tableauLaby = new Cellule[hauteur][largeur];
        int[][] marquesCellules = new int[hauteur][largeur];
        int[][] marquesChaines = new int[hauteur][largeur];
        int compteur;
        int compteurAretes;
       
        // Initialisation des marques
        compteur = 0;
        for(int i = 0; i < marquesCellules.length; i++) {
            for(int j = 0; j < marquesCellules[i].length; j++) {
                marquesCellules[i][j] = compteur;
                marquesChaines[i][j] = 0;
                compteur++;
            }
        }
      
        // Fermeture des cellules
        for (int i = 0; i < tableauLaby.length; i++) {
         	for (int j = 0; j < tableauLaby[i].length; j++) {
       		    tableauLaby[i][j] = new Cellule(new boolean[] {true,true,true,true});
       	    }
        }

        do {

            // Récupération d'une première cellule aléatoire
        
            int yPremiereCellule = (int)(Math.random() * (tableauLaby.length));
            int xPremiereCellule = (int)(Math.random() * (tableauLaby[0].length));
        
            Cellule premiereCellule = tableauLaby[yPremiereCellule][xPremiereCellule];

            System.out.println("Premiere cellule : " + xPremiereCellule + "," + yPremiereCellule);
        
            int numeroPremiereCellule = marquesCellules[yPremiereCellule][xPremiereCellule];
        
            // Récupération de la direction vers laquelle choisir la deuxieme cellule
            boolean[] directionsPossibles = {true, true, true, true}; // N, S, E, O
        
            if (yPremiereCellule == 0) {
                directionsPossibles[0] = false;
            }
            if (yPremiereCellule == tableauLaby.length -1) {
                directionsPossibles[1] = false;
            }
            if (xPremiereCellule == 0)  {
                directionsPossibles[2] = false;
            }
            if (yPremiereCellule == tableauLaby[0].length -1)  {
                directionsPossibles[3] = false;
            }
        
            if (directionsPossibles[0] == false && directionsPossibles[1] == false
                && directionsPossibles[2] == false  && directionsPossibles[3] == false) {
                // TODO trouver une meilleure exception
                throw new IllegalArgumentException("Aucune direction possible");
            }

            int direction;
            do {
                direction = (int)(Math.random() * (directionsPossibles.length));
            } while (!directionsPossibles[direction]);
        
            int xDeuxiemeCellule = 0;
            int yDeuxiemeCellule = 0;

            // Récupération de la deuxième cellule
            if (direction == 0) {
                xDeuxiemeCellule = xPremiereCellule - 1;
                yDeuxiemeCellule = yPremiereCellule;
            } else if (direction == 1) {
                xDeuxiemeCellule = xPremiereCellule + 1;
                yDeuxiemeCellule = yPremiereCellule;
            } else if (direction == 2) {
                xDeuxiemeCellule = xPremiereCellule;
                yDeuxiemeCellule = yPremiereCellule + 1;
            } else if (direction == 3) {
                xDeuxiemeCellule = xPremiereCellule;
                yDeuxiemeCellule = yPremiereCellule - 1;
            }
        
            Cellule deuxiemeCellule = tableauLaby[yDeuxiemeCellule][xDeuxiemeCellule];

            // Destruction des murs
            if (direction == 0) {
                premiereCellule.setMurs(false, 0);
                deuxiemeCellule.setMurs(false, 1);
            } else if (direction == 1) {
                premiereCellule.setMurs(false, 1);
                deuxiemeCellule.setMurs(false, 0);
            } else if (direction == 2) {
                premiereCellule.setMurs(false, 2);
                deuxiemeCellule.setMurs(false, 3);
            } else if (direction == 3) {
                premiereCellule.setMurs(false, 3);
                deuxiemeCellule.setMurs(false, 2);
            }

            // Marquage de chaine des cellules
            int marquePremiereCellule = marquesChaines[yPremiereCellule][xPremiereCellule];
            int marqueDeuxiemeCellule = marquesChaines[yDeuxiemeCellule][xDeuxiemeCellule];
            int compteurMarques = 1;

            if (marquePremiereCellule != 0 && marqueDeuxiemeCellule == 0) {
                marquesChaines[yDeuxiemeCellule][xDeuxiemeCellule] = marquePremiereCellule;
            } else if (marquePremiereCellule == 0 && marqueDeuxiemeCellule != 0){
                marquesChaines[yPremiereCellule][xPremiereCellule] = marqueDeuxiemeCellule;
            } else if (marquePremiereCellule == 0 && marqueDeuxiemeCellule == 0) {
                marquesChaines[yPremiereCellule][xPremiereCellule] = compteurMarques;
                marquesChaines[yDeuxiemeCellule][xDeuxiemeCellule] = compteurMarques;
            } else if (marquePremiereCellule == marqueDeuxiemeCellule) {
                for (int i = 0; i < marquesChaines.length; i++) {
                    for (int j = 0; j < marquesChaines[i].length; j++) {
                        if (marquesChaines[i][j] == marqueDeuxiemeCellule) {
                            marquesChaines[i][j] = marquePremiereCellule;
                        }
                    }
                }
            }
        } while (compteur < hauteur * largeur - 1);

        
      
      
       // Création du labyrinthe
       Labyrinthe laby = new Labyrinthe(largeur, hauteur);
      
       for (int i = 0; i < tableauLaby.length; i++) {
       	    for (int j = 0; j < tableauLaby[i].length; j++) {
       		    laby.ajoutCellule(i, j, tableauLaby[i][j].estMurPresent('N'),
       								tableauLaby[i][j].estMurPresent('S'),
       								tableauLaby[i][j].estMurPresent('E'),
       								tableauLaby[i][j].estMurPresent('O'));
       	    }
        }
      
       return laby;
    }

    /**
     * création du labyrinthe par backtracking (descente en profondeur)
     * @param hauteur la hauteur du labyrinthe
     * @param largeur la largeur du labyrinthe
     * @return le labyrinthe créer
     */
    public static Labyrinthe creationBacktracking(int hauteur, int largeur) {
        int sommetCourant;
        int [][]numeroSommet = new int[largeur][hauteur];
        boolean[][] sommetParcouru = new boolean [hauteur][largeur];
        boolean[][] matrice = new boolean[hauteur * largeur][hauteur * largeur];

        //numérotation des sommets et initialisation des sommets parcourus
        int compteur = 1;
        for (int i = 0; i < hauteur; i++) {
            for (int j = 0; j < largeur; j++) {
                numeroSommet[i][j] = compteur;
                sommetParcouru[i][j] = false;
                compteur ++;
            }
        }

        //choix aléatoire du premier sommet à empiler
        Pile pileSommets = new Pile();
        Random random = new Random();
        int numeroHauteur = random.nextInt(hauteur);
        int numeroLargeur = random.nextInt(largeur);
        pileSommets.empiler(numeroHauteur * largeur + numeroLargeur);
        sommetParcouru[numeroHauteur][numeroLargeur] = true;

        while(!pileSommets.estVide()) {
            sommetCourant = (int) pileSommets.sommet();
            int hauteurCourante = sommetCourant / largeur;
            int largeurCourante = sommetCourant % largeur;
            List<Integer> voisinsNonParcourus = new ArrayList<>();
            
         // Chercher les voisins non parcourus
            if (hauteurCourante > 0 && !sommetParcouru[hauteurCourante - 1][largeurCourante]) {
                voisinsNonParcourus.add((hauteurCourante - 1) * largeur + largeurCourante);
            }
            if (hauteurCourante < hauteur - 1 && !sommetParcouru[hauteurCourante + 1][largeurCourante]) {
                voisinsNonParcourus.add((hauteurCourante + 1) * largeur + largeurCourante);
            }
            if (largeurCourante > 0 && !sommetParcouru[hauteurCourante][largeurCourante - 1]) {
                voisinsNonParcourus.add(hauteurCourante * largeur + (largeurCourante - 1));
            }
            if (largeurCourante < largeur - 1 && !sommetParcouru[hauteurCourante][largeurCourante + 1]) {
                voisinsNonParcourus.add(hauteurCourante * largeur + (largeurCourante + 1));
            }

            if (voisinsNonParcourus.isEmpty()) {
                // Aucun voisin non parcouru, on dépile le sommet courant
                pileSommets.depiler();
            } else {
                // Choisir aléatoirement un voisin non parcouru
                int voisinAleatoire = voisinsNonParcourus.get(random.nextInt(voisinsNonParcourus.size()));

                // Créer l'arête entre le sommet courant et le voisin
                int hauteurVoisin = voisinAleatoire / largeur;
                int largeurVoisin = voisinAleatoire % largeur;
                matrice[hauteurCourante][largeurCourante] = true;
                matrice[hauteurCourante + (hauteurVoisin - hauteurCourante)][largeurCourante +(largeurVoisin - largeurCourante)] = true;

                // Parcourir le voisin et l'ajouter à la pile
                sommetParcouru[hauteurVoisin][largeurVoisin] = true;
                pileSommets.empiler(voisinAleatoire);
            }

            // 0 -> à gauche
            // 1 -> à droite
            // 2 -> dessus
            // 3 -> dessous
        } 

        //création du labyrinthe avec toutes les portes fermés
        Labyrinthe laby = new Labyrinthe(largeur,hauteur);
            
        boolean murNord = true,
            murSud = true,
            murOuest = true,
            murEst = true;
                

        for(int i = 0; i < hauteur; i++) {
            for(int j = 0; j < largeur; j++){
                if(matrice[i][j]){
                    if(j == i - matrice[i].length) {
                        murNord = false;
                    }
                    if(j == i + matrice[i].length) {
                        murSud = false;
                    }
                    if(j == i - 1) {
                        murOuest = false;
                    }
                    if(j == i + 1) {
                        murEst = false;
                    } 
                }
                laby.ajoutCellule(i, j, murNord, murSud, murOuest, murEst);
            }
        }  
        
        return laby;
    }
}